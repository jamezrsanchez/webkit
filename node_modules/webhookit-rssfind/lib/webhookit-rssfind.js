//var discover = require('rssdiscovery');
//var parser = require('blindparser');

var RssBraider = require('rss-braider'),
    feeds = {};

exports.run = function (params, cb) {

var url = params.url;
var item = {};
var sources = [];
//var sources = new Array();

for (var i = 0; i < url.length; i++) {
    sources.push({
        "name": url[i],
        "count": 1000,
        "feed_url": url[i]
    });
}

feeds.simple_test_feed = {
    "feed_name"             : "feed",
    "default_count"         : 1,
    "no_cdata_fields"       : [], // Don't wrap these fields in CDATA tags 
    "meta" : {
        "title": "NPR Braided Feed",
        "description": "This is a test of two NPR"
    },
    "sources" : sources
};
var braider_options = {
    feeds           : feeds,
    indent          : "",
    date_sort_order : "desc", // Newest first 
    log_level       : "debug"
};
var rss_braider = RssBraider.createClient(braider_options);
 
// Override logging level (debug, info, warn, err, off) 
rss_braider.logger.level('off');
 
// Output braided feed as rss. use 'json' for JSON output. 
rss_braider.processFeed('simple_test_feed', 'json', function(err, data){
    if (err) {
        return console.log(err);
    }
    //console.log(data);
    var array = JSON.parse("[" + data + "]");
    cb({"out": array[0]['items']}); 
});

/*
if( typeof options === 'object' ) {
    console.log('array');
}        


discover(url, function (err, results) {
    //cb({"out": results['links'][0]});
        //show_results(results['links'][0]);   
        //cb({"out": show_results(results['links'][0])});
        console.log(results);
    });    

//console.log(feed_url);

//console.log(feed_url.getOwnPropertyNames());
    */
/*   
parser.parseURL(url, function (err, out) {
        cb({"out": out}); 
    })
*/    
    //console.log(params.in['']);
};



exports.definition = {
    "name": "rssfind",
    "category": "Operators",
    "container": {
        "icon": "/images/icons/rss_add.png",
        "xtype": "WireIt.FormContainer",
        "title": "Discover RSS",
        fields: [
        {
            type: 'list',
            label: "Feed URL",
            minItems: 1,
            elementType: {type: 'string'},
            value: [''],
            name: 'url',
            sortable: true,
            useButtons: true
            
        }],
        "terminals": [
            {"name": "out", "direction": [0, 1], "offsetPosition": {"left": 75, "bottom": -15}, "ddConfig": {
                    "type": "output",
                    "allowedTypes": ["input"]
                }
            }
        ]
    }
};

function show_results(results) {
 // We want this to show the "results" from the callback function.
 feed_url = results;
}

function discover_feeds(url) {
    discover(url, function (err, results) {

        return results;
    });
}

function parse_url(url){
    parser.parseURL(url, function (err, out) {
        return out;
    });
}